#include "Exercise.h"
#include"Function.h"
#include<time.h>
#include<iostream>
#include <cmath>

void exercise() {
	vector<vector<double>> A = { {1.0000000000,4.9176000000,1.0000000000,3.4720000000,0.9980000000,1.0000000000,7.0000000000,4.0000000000,42.0000000000,3.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0208000000,1.0000000000,3.5310000000,1.5000000000,2.0000000000,7.0000000000,4.0000000000,62.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,4.5429000000,1.0000000000,2.2750000000,1.1750000000,1.0000000000,6.0000000000,3.0000000000,40.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,4.5573000000,1.0000000000,4.0500000000,1.2320000000,1.0000000000,6.0000000000,3.0000000000,54.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0597000000,1.0000000000,4.4550000000,1.1210000000,1.0000000000,6.0000000000,3.0000000000,42.0000000000,3.0000000000,1.0000000000,0.0000000000},{1.0000000000,3.8910000000,1.0000000000,4.4550000000,0.9880000000,1.0000000000,6.0000000000,3.0000000000,56.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.8980000000,1.0000000000,5.8500000000,1.2400000000,1.0000000000,7.0000000000,3.0000000000,51.0000000000,2.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.6039000000,1.0000000000,9.5200000000,1.5010000000,0.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,15.4202000000,2.5000000000,9.8000000000,3.4200000000,2.0000000000,10.0000000000,5.0000000000,42.0000000000,2.0000000000,1.0000000000,1.0000000000},{1.0000000000,14.4598000000,2.5000000000,12.8000000000,3.0000000000,2.0000000000,9.0000000000,5.0000000000,14.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.8282000000,1.0000000000,6.4350000000,1.2250000000,2.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.3003000000,1.0000000000,4.9883000000,1.5520000000,1.0000000000,6.0000000000,3.0000000000,30.0000000000,1.0000000000,2.0000000000,0.0000000000},{1.0000000000,6.2712000000,1.0000000000,5.5200000000,0.9750000000,1.0000000000,5.0000000000,2.0000000000,30.0000000000,1.0000000000,2.0000000000,0.0000000000},{1.0000000000,5.9592000000,1.0000000000,6.6660000000,1.1210000000,2.0000000000,6.0000000000,3.0000000000,32.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,5.0500000000,1.0000000000,5.0000000000,1.0200000000,0.0000000000,5.0000000000,2.0000000000,46.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,5.6039000000,1.0000000000,9.5200000000,1.5010000000,0.0000000000,6.0000000000,3.0000000000,32.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.2464000000,1.5000000000,5.1500000000,1.6640000000,2.0000000000,8.0000000000,4.0000000000,50.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,6.6969000000,1.5000000000,6.0920000000,1.4880000000,1.5000000000,7.0000000000,3.0000000000,22.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,7.7841000000,1.5000000000,7.1020000000,1.3760000000,1.0000000000,6.0000000000,3.0000000000,17.0000000000,2.0000000000,1.0000000000,0.0000000000},{1.0000000000,9.0384000000,1.0000000000,7.8000000000,1.5000000000,1.5000000000,7.0000000000,3.0000000000,23.0000000000,3.0000000000,3.0000000000,0.0000000000},{1.0000000000,5.9894000000,1.0000000000,5.5200000000,1.2560000000,2.0000000000,6.0000000000,3.0000000000,40.0000000000,4.0000000000,1.0000000000,1.0000000000},{1.0000000000,7.5422000000,1.5000000000,4.0000000000,1.6900000000,1.0000000000,6.0000000000,3.0000000000,22.0000000000,1.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.7951000000,1.5000000000,9.8900000000,1.8200000000,2.0000000000,8.0000000000,4.0000000000,50.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,6.0931000000,1.5000000000,6.7265000000,1.6520000000,1.0000000000,6.0000000000,3.0000000000,44.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,8.3607000000,1.5000000000,9.1500000000,1.7770000000,2.0000000000,8.0000000000,4.0000000000,48.0000000000,1.0000000000,1.0000000000,1.0000000000},{1.0000000000,8.1400000000,1.0000000000,8.0000000000,1.5040000000,2.0000000000,7.0000000000,3.0000000000,3.0000000000,1.0000000000,3.0000000000,0.0000000000},{1.0000000000,9.1416000000,1.5000000000,7.3262000000,1.8310000000,1.5000000000,8.0000000000,4.0000000000,31.0000000000,4.0000000000,1.0000000000,0.0000000000},{1.0000000000,12.0000000000,1.5000000000,5.0000000000,1.2000000000,2.0000000000,6.0000000000,3.0000000000,30.0000000000,3.0000000000,1.0000000000,1.0000000000} },
		S = A;//matrix_print(A);
	int m = A.size(), n = A[0].size();
	vector<vector<double>> U(m, vector<double>(m));
	vector<vector<double>> V(n, vector<double>(n));
	svd_decomposition(S, U, V);
	cout << "U^T*A*V=S" << endl << "S=" << endl;matrix_print(S);
	cout << "U=" << endl;	matrix_print(U);
	cout << "V=" << endl;	matrix_print(V);
	vector<double> ev(n);//奇异值序列，用于排序
	cout << "排序后矩阵的从小到大所有奇异值为" << endl;
	for (int i = 0; i < n; i++) {
		ev[i] = S[i][i];
	}sort_s_to_l(ev);
	solution_print(ev);

	vector<vector<double>>P = U, Q = V;
	matrix_full_transpose(P); matrix_full_transpose(Q);
	matrix_multiply(U, S); matrix_multiply2(S, Q);
	matrix_multiply(U, P); matrix_multiply(V, Q);
	//matrix_print(S);
	double ep = 0, eq = 0, et = 0, temp = 0;
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			temp = A[i][j]- S[i][j];
			if (abs(temp) > abs(et)) {
				et = temp;
			}
		}
	}
	cout << "et=" << et << endl;
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < m; j++) {
			if (i == j) {
				temp = 1 - P[i][j];
			}
			else {
				temp =P[i][j];
			}
			if (abs(temp) > abs(ep)) {
				ep= temp;
			}
		}
	}
	cout << "ep=" << ep << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j) {
				temp = 1 - Q[i][j];
			}
			else {
				temp = Q[i][j];
			}
			if (abs(temp) > abs(eq)) {
				eq = temp;
			}
		}
	}
	cout << "eq=" << eq << endl;
	
}

void test() {
	vector<vector<double>> A = { {0.332861, 0.621724, 0.412818, 0.524977, 0.903025,
	0.377864}, {0.330695, 0.314598, 0.808281, 0.0806797, 0.425645,
	0.247579}, {0.745413, 0.890496, 0.205143, 0.0589361, 0.956163,
	0.9345}, {0.0871294, 0.276315, 0.152526, 0.14223, 0.30168,
	0.891605}, {0.540445, 0.462086, 0.928676, 0.948013, 0.311572,
	 0.825375}, {0.196763, 0.437446, 0.376834, 0.181448, 0.150237,
	0.774757} };
	matrix_print(A);
	vector<vector<double>> U(6, vector<double>(6));
	vector<vector<double>> V(6, vector<double>(6));
	
	

	for (int i = 0; i < 6; i++) {
		for (int j = 0; j < 6; j++) {
			if (abs(A[i][j]) < 1e-7) {
				A[i][j] = 0;
			}
		}
	}
	bidiagonalisation(A, U, V);matrix_print(A);
	//svd_decomposition(A, U, V);
	
	//matrix_full_transpose(U); matrix_full_transpose(V); matrix_multiply(U, A); matrix_multiply2(A, V);
	//wilkinson_displacement(A, U, V);matrix_full_transpose(V);matrix_multiply(U, A); matrix_multiply2(A, V);
	matrix_print(A);


}